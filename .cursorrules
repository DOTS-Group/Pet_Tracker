Flutter Kodlama Standartları ve Yapılandırma Kuralları

## 1. Kod Yapısı ve UI Kuralları

- UI'de boşluklar padding yapısı ile tanımlanmalıdır. SizedBox yerine Padding kullanın.
- Sayfa yönlendirmeleri pushNamed yöntemi ile yapılmalıdır. Navigator.pushNamed(context, routeName); olarak
kullan normal navigator diyerek widget çağırma.
- Hatasız, eksiksiz ve çalışabilir kod yazımına özen gösterin.
- Riverpod durum yönetimi için kullanılmalıdır.
- MVC yapısı benimsenmelidir:
    * model/: Veri modellerini içerir.
    * service/: API ve servis işlemlerini içerir.
    * widget/: UI bileşenleri için ortak kullanılacak widget'lar burada yer alır.
    * page/: Sayfa bazlı UI yapıları burada tanımlanır.
    * controller/: Sayfa bazlı controller işlemlerini içerir.
- Bir şeyler ekleyince kütüphanesi eksik ise kütüphane eklenmeli. Kütüphanesini eklemeden kodu tamamlamayın.


## 2. Kodun Anlaşılabilirliği ve Optimizasyonu
- Kodun anlaşılır ve okunaklı olması sağlanmalıdır.
- Performans kritik olduğu için builder yapıları mümkün olduğunca kullanılmalıdır (örn. ListView.builder).
- Sayfa yönlendirmeleri main.dart içindeki routes üzerinden yapılmalıdır.
- Sabit değerler, listeler ve provider'lar shared/ klasörü içinde tutulmalıdır:
    * shared_constants.dart → Sabit değişkenler.
    * shared_lists.dart → Sabit listeler.
    * shared_providers.dart → Riverpod provider değerleri.
- Kod tekrarından kaçınılmalı, tekrar eden öğeler döngü (for, map, builder) ile oluşturulmalıdır.

## 3. Dil Desteği ve Çeviri Yönetimi
- Dil desteği assets/translations/ içinde yer alan dosyalarla sağlanmaktadır.
- Türkçe için tr.json, İngilizce için en.json kullanılmaktadır.
- Çeviri değerlerine context.tr ile erişilmektedir.
- Değişken isimlendirmeleri belirli bir yapıya uygun olmalıdır:
    * Eğer bir sayfa ile ilişkiliyse, çeviri anahtarı sayfa adının altına eklenmelidir.
    * Örneğin, "splashPage": "Splash Page" tanımlaması yapılırsa, altındaki değişkenler Splash Page için oluşturulur.
    * Boşluk kullanılmadan, camelCase formatında yazılmalıdır. (Örnek: "nextButton")

## 4. API Kullanımı
- API çağrıları için http paketi kullanılmalıdır.
- Servis işlemleri service/ klasörü içinde tanımlanmalıdır.
- async/await yapıları kullanılarak kod senkronizasyonu sağlanmalıdır.

## 5. Medya Yönetimi (İkonlar & Görseller)
- İkonlar assets/icons/ klasörü içinde saklanmalıdır.
- Eğer çok fazla ikon varsa, uygun alt klasörler oluşturulmalıdır.
- Görseller assets/images/ klasörü içinde saklanmalıdır.
- Yeni bir görsel eklenecekse, yolu shared/constants_shared.dart içinde tanımlanmalı ve oradan çekilmelidir.

## 6. Performans Optimizasyonu
- Performansı artırmak için ListView.builder ve GridView.builder kullanılmalıdır.
- StatefulWidget mümkün olduğunca az kullanılmalı, zorunlu hallerde alt widget'lara bölünerek optimize edilmelidir.
setState çağrıları gereksiz yere yapılmamalıdır. Hatta hiçbir zaman yapma.

## 7. UI & UX Standartları
- Padding kullanılmalı, SizedBox sadece özel durumlarda tercih edilmelidir.
- Widget'lar ayrı dosyalara bölünmeli ve tekrar kullanılabilir yapıda olmalıdır.
- Dil desteği için metinler context.tr ile çağrılmalıdır.
- Kenar yuvarlatmalar: BorderRadius.circular(height * SharedConstants.paddingGenerall) standardına uygun olmalıdır.
- Opacity ayarlamaları .withOpacity(value) veya .withValues(alpha: ) ile yapılmalıdır.
- TextField cursor rengi: Turuncu olmalıdır.
- Metin Stilleri:
    * Başlıklar için Theme.of(context).textTheme.displayMedium kullanılmalıdır.
    * Çok büyük başlıklar için displayLarge kullanılabilir.
    * Gövde metinleri için bodyMedium, küçük metinler için bodyLarge kullanılmalıdır.
    * Tüm metin stilleri shared/theme_shared.dart içinde tanımlanmalıdır.
